package com.cantatahealth.fhir.db.model;
// Generated Oct 31, 2017 5:51:36 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

/**
 * CodingDbEntity generated by hbm2java
 */
@Entity
@Table(name = "Coding", schema = "dbo", catalog = "FHIRDB")
public class CodingDbEntity implements java.io.Serializable {

	private long id;
	private String version;
	private String system;
	private String code;
	private String display;
	private Boolean userselected;
	private Date createddate;
	private String createdby;
	private Date updateddate;
	private String updatedby;
	private Set<GoalDbEntity> goalDbEntitiesForDescription = new HashSet<GoalDbEntity>(0);
	private Set<ImmunizationDbEntity> immunizationDbEntitiesForVaccinecode = new HashSet<ImmunizationDbEntity>(0);
	private Set<ObservationDbEntity> observationDbEntitiesForStatus = new HashSet<ObservationDbEntity>(0);
	private Set<ConditionDbEntity> conditionDbEntitiesForCode = new HashSet<ConditionDbEntity>(0);
	private Set<ConditionDbEntity> conditionDbEntitiesForClinicalstatus = new HashSet<ConditionDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForStatus = new HashSet<ProcedureDbEntity>(0);
	private Set<ReferralRequestDbEntity> referralRequestDbEntitiesForStatus = new HashSet<ReferralRequestDbEntity>(0);
	private Set<ConditionDbEntity> conditionDbEntitiesForVerificationstatus = new HashSet<ConditionDbEntity>(0);
	private Set<ConditionDbEntity> conditionDbEntitiesForCategory = new HashSet<ConditionDbEntity>(0);
	private Set<ConditionDbEntity> conditionDbEntitiesForSeverity = new HashSet<ConditionDbEntity>(0);
	private Set<GoalDbEntity> goalDbEntitiesForPriority = new HashSet<GoalDbEntity>(0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForClinicalstatus = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<LocationDbEntity> locationDbEntitiesForType = new HashSet<LocationDbEntity>(0);
	private Set<LocationDbEntity> locationDbEntitiesForStatus = new HashSet<LocationDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode = new HashSet<ProcedureDbEntity>(0);
	private Set<GoalDbEntity> goalDbEntitiesForStatus = new HashSet<GoalDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForCategory = new HashSet<ProcedureDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForCode = new HashSet<ProcedureDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForCategory_1 = new HashSet<ProcedureDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason = new HashSet<ProcedureDbEntity>(0);
	private Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForStatus = new HashSet<MedicationAdministrationDbEntity>(
			0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason_1 = new HashSet<ProcedureDbEntity>(0);
	private Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasoncode = new HashSet<MedicationAdministrationDbEntity>(
			0);
	private Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasonnotgiven = new HashSet<MedicationAdministrationDbEntity>(
			0);
	private Set<LocationDbEntity> locationDbEntitiesForOperationalstatus = new HashSet<LocationDbEntity>(0);
	private Set<PatientDbEntity> patientDbEntitiesForGender = new HashSet<PatientDbEntity>(0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForType = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForVerificationstatus = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCriticality = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<DosageDbEntity> dosageDbEntities = new HashSet<DosageDbEntity>(0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCategory = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCode = new HashSet<AllergyIntoleranceDbEntity>(
			0);
	private Set<MedicationDbEntity> medicationDbEntitiesForCode = new HashSet<MedicationDbEntity>(0);
	private Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForCategory = new HashSet<MedicationAdministrationDbEntity>(
			0);
	private Set<DeviceDbEntity> deviceDbEntitiesForStatus = new HashSet<DeviceDbEntity>(0);
	private Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForRelationship = new HashSet<RelatedPersonDbEntity>(0);
	private Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForGender = new HashSet<RelatedPersonDbEntity>(0);
	private Set<EncounterDbEntity> encounterDbEntitiesForClass = new HashSet<EncounterDbEntity>(0);
	private Set<AddressDbEntity> addressDbEntities = new HashSet<AddressDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForCode_1 = new HashSet<ProcedureDbEntity>(0);
	private Set<ImmunizationDbEntity> immunizationDbEntitiesForRoute = new HashSet<ImmunizationDbEntity>(0);
	private Set<CareTeamDbEntity> careTeamDbEntitiesForStatus = new HashSet<CareTeamDbEntity>(0);
	private Set<PatientMapDbEntity> patientMapDbEntitiesForEthnicity = new HashSet<PatientMapDbEntity>(0);
	private Set<PatientMapDbEntity> patientMapDbEntitiesForRace = new HashSet<PatientMapDbEntity>(0);
	private Set<ImmunizationDbEntity> immunizationDbEntitiesForStatus = new HashSet<ImmunizationDbEntity>(0);
	private Set<ImmunizationDbEntity> immunizationDbEntitiesForSite = new HashSet<ImmunizationDbEntity>(0);
	private Set<DeviceDbEntity> deviceDbEntitiesForType = new HashSet<DeviceDbEntity>(0);
	private Set<ReactionnDbEntity> reactionnDbEntitiesForManifestation = new HashSet<ReactionnDbEntity>(0);
	private Set<QuantityDbEntity> quantityDbEntities = new HashSet<QuantityDbEntity>(0);
	private Set<MedicationDbEntity> medicationDbEntitiesForStatus = new HashSet<MedicationDbEntity>(0);
	private Set<EncounterDbEntity> encounterDbEntitiesForStatus = new HashSet<EncounterDbEntity>(0);
	private Set<PatientDbEntity> patientDbEntitiesForMaritalstatus = new HashSet<PatientDbEntity>(0);
	private Set<ReferralRequestDbEntity> referralRequestDbEntitiesForRecipient = new HashSet<ReferralRequestDbEntity>(
			0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode_1 = new HashSet<ProcedureDbEntity>(0);
	private Set<ObservationDbEntity> observationDbEntitiesForInterpretation = new HashSet<ObservationDbEntity>(0);
	private Set<ObservationDbEntity> observationDbEntitiesForBodysite = new HashSet<ObservationDbEntity>(0);
	private Set<CareTeamDbEntity> careTeamDbEntitiesForCategory = new HashSet<CareTeamDbEntity>(0);
	private Set<ObservationDbEntity> observationDbEntitiesForCategory = new HashSet<ObservationDbEntity>(0);
	private Set<ObservationDbEntity> observationDbEntitiesForCode = new HashSet<ObservationDbEntity>(0);
	private Set<ReactionnDbEntity> reactionnDbEntitiesForSeverity = new HashSet<ReactionnDbEntity>(0);
	private Set<ProcedureDbEntity> procedureDbEntitiesForStatus_1 = new HashSet<ProcedureDbEntity>(0);

	public CodingDbEntity() {
	}

	public CodingDbEntity(long id) {
		this.id = id;
	}

	public CodingDbEntity(long id, String system, String code, String display, Boolean userselected, Date createddate,
			String createdby, Date updateddate, String updatedby, Set<GoalDbEntity> goalDbEntitiesForDescription,
			Set<ImmunizationDbEntity> immunizationDbEntitiesForVaccinecode,
			Set<ObservationDbEntity> observationDbEntitiesForStatus, Set<ConditionDbEntity> conditionDbEntitiesForCode,
			Set<ConditionDbEntity> conditionDbEntitiesForClinicalstatus,
			Set<ProcedureDbEntity> procedureDbEntitiesForStatus,
			Set<ReferralRequestDbEntity> referralRequestDbEntitiesForStatus,
			Set<ConditionDbEntity> conditionDbEntitiesForVerificationstatus,
			Set<ConditionDbEntity> conditionDbEntitiesForCategory,
			Set<ConditionDbEntity> conditionDbEntitiesForSeverity, Set<GoalDbEntity> goalDbEntitiesForPriority,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForClinicalstatus,
			Set<LocationDbEntity> locationDbEntitiesForType, Set<LocationDbEntity> locationDbEntitiesForStatus,
			Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode, Set<GoalDbEntity> goalDbEntitiesForStatus,
			Set<ProcedureDbEntity> procedureDbEntitiesForCategory, Set<ProcedureDbEntity> procedureDbEntitiesForCode,
			Set<ProcedureDbEntity> procedureDbEntitiesForCategory_1,
			Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason,
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForStatus,
			Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason_1,
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasoncode,
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasonnotgiven,
			Set<LocationDbEntity> locationDbEntitiesForOperationalstatus,
			Set<PatientDbEntity> patientDbEntitiesForGender,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForType,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForVerificationstatus,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCriticality,
			Set<DosageDbEntity> dosageDbEntities,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCategory,
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCode,
			Set<MedicationDbEntity> medicationDbEntitiesForCode,
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForCategory,
			Set<DeviceDbEntity> deviceDbEntitiesForStatus,
			Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForRelationship,
			Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForGender,
			Set<EncounterDbEntity> encounterDbEntitiesForClass, Set<AddressDbEntity> addressDbEntities,
			Set<ProcedureDbEntity> procedureDbEntitiesForCode_1,
			Set<ImmunizationDbEntity> immunizationDbEntitiesForRoute, Set<CareTeamDbEntity> careTeamDbEntitiesForStatus,
			Set<PatientMapDbEntity> patientMapDbEntitiesForEthnicity,
			Set<PatientMapDbEntity> patientMapDbEntitiesForRace,
			Set<ImmunizationDbEntity> immunizationDbEntitiesForStatus,
			Set<ImmunizationDbEntity> immunizationDbEntitiesForSite, Set<DeviceDbEntity> deviceDbEntitiesForType,
			Set<ReactionnDbEntity> reactionnDbEntitiesForManifestation, Set<QuantityDbEntity> quantityDbEntities,
			Set<MedicationDbEntity> medicationDbEntitiesForStatus, Set<EncounterDbEntity> encounterDbEntitiesForStatus,
			Set<PatientDbEntity> patientDbEntitiesForMaritalstatus,
			Set<ReferralRequestDbEntity> referralRequestDbEntitiesForRecipient,
			Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode_1,
			Set<ObservationDbEntity> observationDbEntitiesForInterpretation,
			Set<ObservationDbEntity> observationDbEntitiesForBodysite,
			Set<CareTeamDbEntity> careTeamDbEntitiesForCategory,
			Set<ObservationDbEntity> observationDbEntitiesForCategory,
			Set<ObservationDbEntity> observationDbEntitiesForCode,
			Set<ReactionnDbEntity> reactionnDbEntitiesForSeverity,
			Set<ProcedureDbEntity> procedureDbEntitiesForStatus_1) {
		this.id = id;
		this.system = system;
		this.code = code;
		this.display = display;
		this.userselected = userselected;
		this.createddate = createddate;
		this.createdby = createdby;
		this.updateddate = updateddate;
		this.updatedby = updatedby;
		this.goalDbEntitiesForDescription = goalDbEntitiesForDescription;
		this.immunizationDbEntitiesForVaccinecode = immunizationDbEntitiesForVaccinecode;
		this.observationDbEntitiesForStatus = observationDbEntitiesForStatus;
		this.conditionDbEntitiesForCode = conditionDbEntitiesForCode;
		this.conditionDbEntitiesForClinicalstatus = conditionDbEntitiesForClinicalstatus;
		this.procedureDbEntitiesForStatus = procedureDbEntitiesForStatus;
		this.referralRequestDbEntitiesForStatus = referralRequestDbEntitiesForStatus;
		this.conditionDbEntitiesForVerificationstatus = conditionDbEntitiesForVerificationstatus;
		this.conditionDbEntitiesForCategory = conditionDbEntitiesForCategory;
		this.conditionDbEntitiesForSeverity = conditionDbEntitiesForSeverity;
		this.goalDbEntitiesForPriority = goalDbEntitiesForPriority;
		this.allergyIntoleranceDbEntitiesForClinicalstatus = allergyIntoleranceDbEntitiesForClinicalstatus;
		this.locationDbEntitiesForType = locationDbEntitiesForType;
		this.locationDbEntitiesForStatus = locationDbEntitiesForStatus;
		this.procedureDbEntitiesForReasoncode = procedureDbEntitiesForReasoncode;
		this.goalDbEntitiesForStatus = goalDbEntitiesForStatus;
		this.procedureDbEntitiesForCategory = procedureDbEntitiesForCategory;
		this.procedureDbEntitiesForCode = procedureDbEntitiesForCode;
		this.procedureDbEntitiesForCategory_1 = procedureDbEntitiesForCategory_1;
		this.procedureDbEntitiesForNotdonereason = procedureDbEntitiesForNotdonereason;
		this.medicationAdministrationDbEntitiesForStatus = medicationAdministrationDbEntitiesForStatus;
		this.procedureDbEntitiesForNotdonereason_1 = procedureDbEntitiesForNotdonereason_1;
		this.medicationAdministrationDbEntitiesForReasoncode = medicationAdministrationDbEntitiesForReasoncode;
		this.medicationAdministrationDbEntitiesForReasonnotgiven = medicationAdministrationDbEntitiesForReasonnotgiven;
		this.locationDbEntitiesForOperationalstatus = locationDbEntitiesForOperationalstatus;
		this.patientDbEntitiesForGender = patientDbEntitiesForGender;
		this.allergyIntoleranceDbEntitiesForType = allergyIntoleranceDbEntitiesForType;
		this.allergyIntoleranceDbEntitiesForVerificationstatus = allergyIntoleranceDbEntitiesForVerificationstatus;
		this.allergyIntoleranceDbEntitiesForCriticality = allergyIntoleranceDbEntitiesForCriticality;
		this.dosageDbEntities = dosageDbEntities;
		this.allergyIntoleranceDbEntitiesForCategory = allergyIntoleranceDbEntitiesForCategory;
		this.allergyIntoleranceDbEntitiesForCode = allergyIntoleranceDbEntitiesForCode;
		this.medicationDbEntitiesForCode = medicationDbEntitiesForCode;
		this.medicationAdministrationDbEntitiesForCategory = medicationAdministrationDbEntitiesForCategory;
		this.deviceDbEntitiesForStatus = deviceDbEntitiesForStatus;
		this.relatedPersonDbEntitiesForRelationship = relatedPersonDbEntitiesForRelationship;
		this.relatedPersonDbEntitiesForGender = relatedPersonDbEntitiesForGender;
		this.encounterDbEntitiesForClass = encounterDbEntitiesForClass;
		this.addressDbEntities = addressDbEntities;
		this.procedureDbEntitiesForCode_1 = procedureDbEntitiesForCode_1;
		this.immunizationDbEntitiesForRoute = immunizationDbEntitiesForRoute;
		this.careTeamDbEntitiesForStatus = careTeamDbEntitiesForStatus;
		this.patientMapDbEntitiesForEthnicity = patientMapDbEntitiesForEthnicity;
		this.patientMapDbEntitiesForRace = patientMapDbEntitiesForRace;
		this.immunizationDbEntitiesForStatus = immunizationDbEntitiesForStatus;
		this.immunizationDbEntitiesForSite = immunizationDbEntitiesForSite;
		this.deviceDbEntitiesForType = deviceDbEntitiesForType;
		this.reactionnDbEntitiesForManifestation = reactionnDbEntitiesForManifestation;
		this.quantityDbEntities = quantityDbEntities;
		this.medicationDbEntitiesForStatus = medicationDbEntitiesForStatus;
		this.encounterDbEntitiesForStatus = encounterDbEntitiesForStatus;
		this.patientDbEntitiesForMaritalstatus = patientDbEntitiesForMaritalstatus;
		this.referralRequestDbEntitiesForRecipient = referralRequestDbEntitiesForRecipient;
		this.procedureDbEntitiesForReasoncode_1 = procedureDbEntitiesForReasoncode_1;
		this.observationDbEntitiesForInterpretation = observationDbEntitiesForInterpretation;
		this.observationDbEntitiesForBodysite = observationDbEntitiesForBodysite;
		this.careTeamDbEntitiesForCategory = careTeamDbEntitiesForCategory;
		this.observationDbEntitiesForCategory = observationDbEntitiesForCategory;
		this.observationDbEntitiesForCode = observationDbEntitiesForCode;
		this.reactionnDbEntitiesForSeverity = reactionnDbEntitiesForSeverity;
		this.procedureDbEntitiesForStatus_1 = procedureDbEntitiesForStatus_1;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false, precision = 18, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Column(name = "version")
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@Column(name = "system")
	public String getSystem() {
		return this.system;
	}

	public void setSystem(String system) {
		this.system = system;
	}

	@Column(name = "code")
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "display")
	public String getDisplay() {
		return this.display;
	}

	public void setDisplay(String display) {
		this.display = display;
	}

	@Column(name = "userselected")
	public Boolean getUserselected() {
		return this.userselected;
	}

	public void setUserselected(Boolean userselected) {
		this.userselected = userselected;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createddate", length = 23)
	public Date getCreateddate() {
		return this.createddate;
	}

	public void setCreateddate(Date createddate) {
		this.createddate = createddate;
	}

	@Column(name = "createdby")
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updateddate", length = 23)
	public Date getUpdateddate() {
		return this.updateddate;
	}

	public void setUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	@Column(name = "updatedby")
	public String getUpdatedby() {
		return this.updatedby;
	}

	public void setUpdatedby(String updatedby) {
		this.updatedby = updatedby;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByDescription")
	public Set<GoalDbEntity> getGoalDbEntitiesForDescription() {
		return this.goalDbEntitiesForDescription;
	}

	public void setGoalDbEntitiesForDescription(Set<GoalDbEntity> goalDbEntitiesForDescription) {
		this.goalDbEntitiesForDescription = goalDbEntitiesForDescription;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByVaccinecode")
	public Set<ImmunizationDbEntity> getImmunizationDbEntitiesForVaccinecode() {
		return this.immunizationDbEntitiesForVaccinecode;
	}

	public void setImmunizationDbEntitiesForVaccinecode(
			Set<ImmunizationDbEntity> immunizationDbEntitiesForVaccinecode) {
		this.immunizationDbEntitiesForVaccinecode = immunizationDbEntitiesForVaccinecode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<ObservationDbEntity> getObservationDbEntitiesForStatus() {
		return this.observationDbEntitiesForStatus;
	}

	public void setObservationDbEntitiesForStatus(Set<ObservationDbEntity> observationDbEntitiesForStatus) {
		this.observationDbEntitiesForStatus = observationDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<ConditionDbEntity> getConditionDbEntitiesForCode() {
		return this.conditionDbEntitiesForCode;
	}

	public void setConditionDbEntitiesForCode(Set<ConditionDbEntity> conditionDbEntitiesForCode) {
		this.conditionDbEntitiesForCode = conditionDbEntitiesForCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByClinicalstatus")
	public Set<ConditionDbEntity> getConditionDbEntitiesForClinicalstatus() {
		return this.conditionDbEntitiesForClinicalstatus;
	}

	public void setConditionDbEntitiesForClinicalstatus(Set<ConditionDbEntity> conditionDbEntitiesForClinicalstatus) {
		this.conditionDbEntitiesForClinicalstatus = conditionDbEntitiesForClinicalstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForStatus() {
		return this.procedureDbEntitiesForStatus;
	}

	public void setProcedureDbEntitiesForStatus(Set<ProcedureDbEntity> procedureDbEntitiesForStatus) {
		this.procedureDbEntitiesForStatus = procedureDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<ReferralRequestDbEntity> getReferralRequestDbEntitiesForStatus() {
		return this.referralRequestDbEntitiesForStatus;
	}

	public void setReferralRequestDbEntitiesForStatus(Set<ReferralRequestDbEntity> referralRequestDbEntitiesForStatus) {
		this.referralRequestDbEntitiesForStatus = referralRequestDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByVerificationstatus")
	public Set<ConditionDbEntity> getConditionDbEntitiesForVerificationstatus() {
		return this.conditionDbEntitiesForVerificationstatus;
	}

	public void setConditionDbEntitiesForVerificationstatus(
			Set<ConditionDbEntity> conditionDbEntitiesForVerificationstatus) {
		this.conditionDbEntitiesForVerificationstatus = conditionDbEntitiesForVerificationstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<ConditionDbEntity> getConditionDbEntitiesForCategory() {
		return this.conditionDbEntitiesForCategory;
	}

	public void setConditionDbEntitiesForCategory(Set<ConditionDbEntity> conditionDbEntitiesForCategory) {
		this.conditionDbEntitiesForCategory = conditionDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityBySeverity")
	public Set<ConditionDbEntity> getConditionDbEntitiesForSeverity() {
		return this.conditionDbEntitiesForSeverity;
	}

	public void setConditionDbEntitiesForSeverity(Set<ConditionDbEntity> conditionDbEntitiesForSeverity) {
		this.conditionDbEntitiesForSeverity = conditionDbEntitiesForSeverity;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByPriority")
	public Set<GoalDbEntity> getGoalDbEntitiesForPriority() {
		return this.goalDbEntitiesForPriority;
	}

	public void setGoalDbEntitiesForPriority(Set<GoalDbEntity> goalDbEntitiesForPriority) {
		this.goalDbEntitiesForPriority = goalDbEntitiesForPriority;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByClinicalstatus")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForClinicalstatus() {
		return this.allergyIntoleranceDbEntitiesForClinicalstatus;
	}

	public void setAllergyIntoleranceDbEntitiesForClinicalstatus(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForClinicalstatus) {
		this.allergyIntoleranceDbEntitiesForClinicalstatus = allergyIntoleranceDbEntitiesForClinicalstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByType")
	public Set<LocationDbEntity> getLocationDbEntitiesForType() {
		return this.locationDbEntitiesForType;
	}

	public void setLocationDbEntitiesForType(Set<LocationDbEntity> locationDbEntitiesForType) {
		this.locationDbEntitiesForType = locationDbEntitiesForType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<LocationDbEntity> getLocationDbEntitiesForStatus() {
		return this.locationDbEntitiesForStatus;
	}

	public void setLocationDbEntitiesForStatus(Set<LocationDbEntity> locationDbEntitiesForStatus) {
		this.locationDbEntitiesForStatus = locationDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByReasoncode")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForReasoncode() {
		return this.procedureDbEntitiesForReasoncode;
	}

	public void setProcedureDbEntitiesForReasoncode(Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode) {
		this.procedureDbEntitiesForReasoncode = procedureDbEntitiesForReasoncode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<GoalDbEntity> getGoalDbEntitiesForStatus() {
		return this.goalDbEntitiesForStatus;
	}

	public void setGoalDbEntitiesForStatus(Set<GoalDbEntity> goalDbEntitiesForStatus) {
		this.goalDbEntitiesForStatus = goalDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForCategory() {
		return this.procedureDbEntitiesForCategory;
	}

	public void setProcedureDbEntitiesForCategory(Set<ProcedureDbEntity> procedureDbEntitiesForCategory) {
		this.procedureDbEntitiesForCategory = procedureDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForCode() {
		return this.procedureDbEntitiesForCode;
	}

	public void setProcedureDbEntitiesForCode(Set<ProcedureDbEntity> procedureDbEntitiesForCode) {
		this.procedureDbEntitiesForCode = procedureDbEntitiesForCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForCategory_1() {
		return this.procedureDbEntitiesForCategory_1;
	}

	public void setProcedureDbEntitiesForCategory_1(Set<ProcedureDbEntity> procedureDbEntitiesForCategory_1) {
		this.procedureDbEntitiesForCategory_1 = procedureDbEntitiesForCategory_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByNotdonereason")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForNotdonereason() {
		return this.procedureDbEntitiesForNotdonereason;
	}

	public void setProcedureDbEntitiesForNotdonereason(Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason) {
		this.procedureDbEntitiesForNotdonereason = procedureDbEntitiesForNotdonereason;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<MedicationAdministrationDbEntity> getMedicationAdministrationDbEntitiesForStatus() {
		return this.medicationAdministrationDbEntitiesForStatus;
	}

	public void setMedicationAdministrationDbEntitiesForStatus(
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForStatus) {
		this.medicationAdministrationDbEntitiesForStatus = medicationAdministrationDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByNotdonereason")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForNotdonereason_1() {
		return this.procedureDbEntitiesForNotdonereason_1;
	}

	public void setProcedureDbEntitiesForNotdonereason_1(Set<ProcedureDbEntity> procedureDbEntitiesForNotdonereason_1) {
		this.procedureDbEntitiesForNotdonereason_1 = procedureDbEntitiesForNotdonereason_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByReasoncode")
	public Set<MedicationAdministrationDbEntity> getMedicationAdministrationDbEntitiesForReasoncode() {
		return this.medicationAdministrationDbEntitiesForReasoncode;
	}

	public void setMedicationAdministrationDbEntitiesForReasoncode(
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasoncode) {
		this.medicationAdministrationDbEntitiesForReasoncode = medicationAdministrationDbEntitiesForReasoncode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByReasonnotgiven")
	public Set<MedicationAdministrationDbEntity> getMedicationAdministrationDbEntitiesForReasonnotgiven() {
		return this.medicationAdministrationDbEntitiesForReasonnotgiven;
	}

	public void setMedicationAdministrationDbEntitiesForReasonnotgiven(
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForReasonnotgiven) {
		this.medicationAdministrationDbEntitiesForReasonnotgiven = medicationAdministrationDbEntitiesForReasonnotgiven;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByOperationalstatus")
	public Set<LocationDbEntity> getLocationDbEntitiesForOperationalstatus() {
		return this.locationDbEntitiesForOperationalstatus;
	}

	public void setLocationDbEntitiesForOperationalstatus(
			Set<LocationDbEntity> locationDbEntitiesForOperationalstatus) {
		this.locationDbEntitiesForOperationalstatus = locationDbEntitiesForOperationalstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByGender")
	public Set<PatientDbEntity> getPatientDbEntitiesForGender() {
		return this.patientDbEntitiesForGender;
	}

	public void setPatientDbEntitiesForGender(Set<PatientDbEntity> patientDbEntitiesForGender) {
		this.patientDbEntitiesForGender = patientDbEntitiesForGender;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByType")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForType() {
		return this.allergyIntoleranceDbEntitiesForType;
	}

	public void setAllergyIntoleranceDbEntitiesForType(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForType) {
		this.allergyIntoleranceDbEntitiesForType = allergyIntoleranceDbEntitiesForType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByVerificationstatus")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForVerificationstatus() {
		return this.allergyIntoleranceDbEntitiesForVerificationstatus;
	}

	public void setAllergyIntoleranceDbEntitiesForVerificationstatus(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForVerificationstatus) {
		this.allergyIntoleranceDbEntitiesForVerificationstatus = allergyIntoleranceDbEntitiesForVerificationstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCriticality")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForCriticality() {
		return this.allergyIntoleranceDbEntitiesForCriticality;
	}

	public void setAllergyIntoleranceDbEntitiesForCriticality(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCriticality) {
		this.allergyIntoleranceDbEntitiesForCriticality = allergyIntoleranceDbEntitiesForCriticality;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntity")
	public Set<DosageDbEntity> getDosageDbEntities() {
		return this.dosageDbEntities;
	}

	public void setDosageDbEntities(Set<DosageDbEntity> dosageDbEntities) {
		this.dosageDbEntities = dosageDbEntities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForCategory() {
		return this.allergyIntoleranceDbEntitiesForCategory;
	}

	public void setAllergyIntoleranceDbEntitiesForCategory(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCategory) {
		this.allergyIntoleranceDbEntitiesForCategory = allergyIntoleranceDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<AllergyIntoleranceDbEntity> getAllergyIntoleranceDbEntitiesForCode() {
		return this.allergyIntoleranceDbEntitiesForCode;
	}

	public void setAllergyIntoleranceDbEntitiesForCode(
			Set<AllergyIntoleranceDbEntity> allergyIntoleranceDbEntitiesForCode) {
		this.allergyIntoleranceDbEntitiesForCode = allergyIntoleranceDbEntitiesForCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<MedicationDbEntity> getMedicationDbEntitiesForCode() {
		return this.medicationDbEntitiesForCode;
	}

	public void setMedicationDbEntitiesForCode(Set<MedicationDbEntity> medicationDbEntitiesForCode) {
		this.medicationDbEntitiesForCode = medicationDbEntitiesForCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<MedicationAdministrationDbEntity> getMedicationAdministrationDbEntitiesForCategory() {
		return this.medicationAdministrationDbEntitiesForCategory;
	}

	public void setMedicationAdministrationDbEntitiesForCategory(
			Set<MedicationAdministrationDbEntity> medicationAdministrationDbEntitiesForCategory) {
		this.medicationAdministrationDbEntitiesForCategory = medicationAdministrationDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<DeviceDbEntity> getDeviceDbEntitiesForStatus() {
		return this.deviceDbEntitiesForStatus;
	}

	public void setDeviceDbEntitiesForStatus(Set<DeviceDbEntity> deviceDbEntitiesForStatus) {
		this.deviceDbEntitiesForStatus = deviceDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByRelationship")
	public Set<RelatedPersonDbEntity> getRelatedPersonDbEntitiesForRelationship() {
		return this.relatedPersonDbEntitiesForRelationship;
	}

	public void setRelatedPersonDbEntitiesForRelationship(
			Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForRelationship) {
		this.relatedPersonDbEntitiesForRelationship = relatedPersonDbEntitiesForRelationship;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByGender")
	public Set<RelatedPersonDbEntity> getRelatedPersonDbEntitiesForGender() {
		return this.relatedPersonDbEntitiesForGender;
	}

	public void setRelatedPersonDbEntitiesForGender(Set<RelatedPersonDbEntity> relatedPersonDbEntitiesForGender) {
		this.relatedPersonDbEntitiesForGender = relatedPersonDbEntitiesForGender;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByClass")
	public Set<EncounterDbEntity> getEncounterDbEntitiesForClass() {
		return this.encounterDbEntitiesForClass;
	}

	public void setEncounterDbEntitiesForClass(Set<EncounterDbEntity> encounterDbEntitiesForClass) {
		this.encounterDbEntitiesForClass = encounterDbEntitiesForClass;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntity")
	public Set<AddressDbEntity> getAddressDbEntities() {
		return this.addressDbEntities;
	}

	public void setAddressDbEntities(Set<AddressDbEntity> addressDbEntities) {
		this.addressDbEntities = addressDbEntities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForCode_1() {
		return this.procedureDbEntitiesForCode_1;
	}

	public void setProcedureDbEntitiesForCode_1(Set<ProcedureDbEntity> procedureDbEntitiesForCode_1) {
		this.procedureDbEntitiesForCode_1 = procedureDbEntitiesForCode_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByRoute")
	public Set<ImmunizationDbEntity> getImmunizationDbEntitiesForRoute() {
		return this.immunizationDbEntitiesForRoute;
	}

	public void setImmunizationDbEntitiesForRoute(Set<ImmunizationDbEntity> immunizationDbEntitiesForRoute) {
		this.immunizationDbEntitiesForRoute = immunizationDbEntitiesForRoute;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<CareTeamDbEntity> getCareTeamDbEntitiesForStatus() {
		return this.careTeamDbEntitiesForStatus;
	}

	public void setCareTeamDbEntitiesForStatus(Set<CareTeamDbEntity> careTeamDbEntitiesForStatus) {
		this.careTeamDbEntitiesForStatus = careTeamDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByEthnicity")
	public Set<PatientMapDbEntity> getPatientMapDbEntitiesForEthnicity() {
		return this.patientMapDbEntitiesForEthnicity;
	}

	public void setPatientMapDbEntitiesForEthnicity(Set<PatientMapDbEntity> patientMapDbEntitiesForEthnicity) {
		this.patientMapDbEntitiesForEthnicity = patientMapDbEntitiesForEthnicity;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByRace")
	public Set<PatientMapDbEntity> getPatientMapDbEntitiesForRace() {
		return this.patientMapDbEntitiesForRace;
	}

	public void setPatientMapDbEntitiesForRace(Set<PatientMapDbEntity> patientMapDbEntitiesForRace) {
		this.patientMapDbEntitiesForRace = patientMapDbEntitiesForRace;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<ImmunizationDbEntity> getImmunizationDbEntitiesForStatus() {
		return this.immunizationDbEntitiesForStatus;
	}

	public void setImmunizationDbEntitiesForStatus(Set<ImmunizationDbEntity> immunizationDbEntitiesForStatus) {
		this.immunizationDbEntitiesForStatus = immunizationDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityBySite")
	public Set<ImmunizationDbEntity> getImmunizationDbEntitiesForSite() {
		return this.immunizationDbEntitiesForSite;
	}

	public void setImmunizationDbEntitiesForSite(Set<ImmunizationDbEntity> immunizationDbEntitiesForSite) {
		this.immunizationDbEntitiesForSite = immunizationDbEntitiesForSite;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByType")
	public Set<DeviceDbEntity> getDeviceDbEntitiesForType() {
		return this.deviceDbEntitiesForType;
	}

	public void setDeviceDbEntitiesForType(Set<DeviceDbEntity> deviceDbEntitiesForType) {
		this.deviceDbEntitiesForType = deviceDbEntitiesForType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByManifestation")
	public Set<ReactionnDbEntity> getReactionnDbEntitiesForManifestation() {
		return this.reactionnDbEntitiesForManifestation;
	}

	public void setReactionnDbEntitiesForManifestation(Set<ReactionnDbEntity> reactionnDbEntitiesForManifestation) {
		this.reactionnDbEntitiesForManifestation = reactionnDbEntitiesForManifestation;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntity")
	public Set<QuantityDbEntity> getQuantityDbEntities() {
		return this.quantityDbEntities;
	}

	public void setQuantityDbEntities(Set<QuantityDbEntity> quantityDbEntities) {
		this.quantityDbEntities = quantityDbEntities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<MedicationDbEntity> getMedicationDbEntitiesForStatus() {
		return this.medicationDbEntitiesForStatus;
	}

	public void setMedicationDbEntitiesForStatus(Set<MedicationDbEntity> medicationDbEntitiesForStatus) {
		this.medicationDbEntitiesForStatus = medicationDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<EncounterDbEntity> getEncounterDbEntitiesForStatus() {
		return this.encounterDbEntitiesForStatus;
	}

	public void setEncounterDbEntitiesForStatus(Set<EncounterDbEntity> encounterDbEntitiesForStatus) {
		this.encounterDbEntitiesForStatus = encounterDbEntitiesForStatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByMaritalstatus")
	public Set<PatientDbEntity> getPatientDbEntitiesForMaritalstatus() {
		return this.patientDbEntitiesForMaritalstatus;
	}

	public void setPatientDbEntitiesForMaritalstatus(Set<PatientDbEntity> patientDbEntitiesForMaritalstatus) {
		this.patientDbEntitiesForMaritalstatus = patientDbEntitiesForMaritalstatus;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByRecipient")
	public Set<ReferralRequestDbEntity> getReferralRequestDbEntitiesForRecipient() {
		return this.referralRequestDbEntitiesForRecipient;
	}

	public void setReferralRequestDbEntitiesForRecipient(
			Set<ReferralRequestDbEntity> referralRequestDbEntitiesForRecipient) {
		this.referralRequestDbEntitiesForRecipient = referralRequestDbEntitiesForRecipient;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByReasoncode")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForReasoncode_1() {
		return this.procedureDbEntitiesForReasoncode_1;
	}

	public void setProcedureDbEntitiesForReasoncode_1(Set<ProcedureDbEntity> procedureDbEntitiesForReasoncode_1) {
		this.procedureDbEntitiesForReasoncode_1 = procedureDbEntitiesForReasoncode_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByInterpretation")
	public Set<ObservationDbEntity> getObservationDbEntitiesForInterpretation() {
		return this.observationDbEntitiesForInterpretation;
	}

	public void setObservationDbEntitiesForInterpretation(
			Set<ObservationDbEntity> observationDbEntitiesForInterpretation) {
		this.observationDbEntitiesForInterpretation = observationDbEntitiesForInterpretation;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByBodysite")
	public Set<ObservationDbEntity> getObservationDbEntitiesForBodysite() {
		return this.observationDbEntitiesForBodysite;
	}

	public void setObservationDbEntitiesForBodysite(Set<ObservationDbEntity> observationDbEntitiesForBodysite) {
		this.observationDbEntitiesForBodysite = observationDbEntitiesForBodysite;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<CareTeamDbEntity> getCareTeamDbEntitiesForCategory() {
		return this.careTeamDbEntitiesForCategory;
	}

	public void setCareTeamDbEntitiesForCategory(Set<CareTeamDbEntity> careTeamDbEntitiesForCategory) {
		this.careTeamDbEntitiesForCategory = careTeamDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCategory")
	public Set<ObservationDbEntity> getObservationDbEntitiesForCategory() {
		return this.observationDbEntitiesForCategory;
	}

	public void setObservationDbEntitiesForCategory(Set<ObservationDbEntity> observationDbEntitiesForCategory) {
		this.observationDbEntitiesForCategory = observationDbEntitiesForCategory;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByCode")
	public Set<ObservationDbEntity> getObservationDbEntitiesForCode() {
		return this.observationDbEntitiesForCode;
	}

	public void setObservationDbEntitiesForCode(Set<ObservationDbEntity> observationDbEntitiesForCode) {
		this.observationDbEntitiesForCode = observationDbEntitiesForCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityBySeverity")
	public Set<ReactionnDbEntity> getReactionnDbEntitiesForSeverity() {
		return this.reactionnDbEntitiesForSeverity;
	}

	public void setReactionnDbEntitiesForSeverity(Set<ReactionnDbEntity> reactionnDbEntitiesForSeverity) {
		this.reactionnDbEntitiesForSeverity = reactionnDbEntitiesForSeverity;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "codingDbEntityByStatus")
	public Set<ProcedureDbEntity> getProcedureDbEntitiesForStatus_1() {
		return this.procedureDbEntitiesForStatus_1;
	}

	public void setProcedureDbEntitiesForStatus_1(Set<ProcedureDbEntity> procedureDbEntitiesForStatus_1) {
		this.procedureDbEntitiesForStatus_1 = procedureDbEntitiesForStatus_1;
	}

}
