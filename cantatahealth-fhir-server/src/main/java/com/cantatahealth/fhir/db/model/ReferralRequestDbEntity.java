package com.cantatahealth.fhir.db.model;
// Generated Oct 31, 2017 4:07:51 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * ReferralRequestDbEntity generated by hbm2java
 */
@Entity
@Table(name = "ReferralRequest", schema = "dbo", catalog = "FHIRDB")
public class ReferralRequestDbEntity implements java.io.Serializable {

	private long id;
	private CodingDbEntity codingDbEntityByStatus;
	private CodingDbEntity codingDbEntityByRecipient;
	private EncounterDbEntity encounterDbEntity;
	private PatientDbEntity patientDbEntity;
	private PeriodDbEntity periodDbEntity;
	private PractitionerDbEntity practitionerDbEntity;
	private Long occurenceperiod;
	private Date authoredon;
	private String reasoncode;
	private String description;
	private String note;
	private Date createddate;
	private String createdby;
	private Date updateddate;
	private String updatedby;
	private Set<EncounterMapDbEntity> encounterMapDbEntities = new HashSet<EncounterMapDbEntity>(0);

	public ReferralRequestDbEntity() {
	}

	public ReferralRequestDbEntity(PeriodDbEntity periodDbEntity, ReferralRequestDbEntity referralRequestDbEntity) {
		this.periodDbEntity = periodDbEntity;
	}

	public ReferralRequestDbEntity(CodingDbEntity codingDbEntityByStatus, CodingDbEntity codingDbEntityByRecipient,
			EncounterDbEntity encounterDbEntity, PatientDbEntity patientDbEntity, PeriodDbEntity periodDbEntity,
			PractitionerDbEntity practitionerDbEntity,
			Long occurenceperiod, Date authoredon, String reasoncode, String description, String note, Date createddate,
			String createdby, Date updateddate, String updatedby,
			Set<EncounterMapDbEntity> encounterMapDbEntities) {
		this.codingDbEntityByStatus = codingDbEntityByStatus;
		this.codingDbEntityByRecipient = codingDbEntityByRecipient;
		this.encounterDbEntity = encounterDbEntity;
		this.patientDbEntity = patientDbEntity;
		this.periodDbEntity = periodDbEntity;
		this.practitionerDbEntity = practitionerDbEntity;
		this.occurenceperiod = occurenceperiod;
		this.authoredon = authoredon;
		this.reasoncode = reasoncode;
		this.description = description;
		this.note = note;
		this.createddate = createddate;
		this.createdby = createdby;
		this.updateddate = updateddate;
		this.updatedby = updatedby;
		this.encounterMapDbEntities = encounterMapDbEntities;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "periodDbEntity") )
	@Id
	@GeneratedValue(generator = "generator")

	@Column(name = "id", unique = true, nullable = false, precision = 18, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "status")
	public CodingDbEntity getCodingDbEntityByStatus() {
		return this.codingDbEntityByStatus;
	}

	public void setCodingDbEntityByStatus(CodingDbEntity codingDbEntityByStatus) {
		this.codingDbEntityByStatus = codingDbEntityByStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "recipient")
	public CodingDbEntity getCodingDbEntityByRecipient() {
		return this.codingDbEntityByRecipient;
	}

	public void setCodingDbEntityByRecipient(CodingDbEntity codingDbEntityByRecipient) {
		this.codingDbEntityByRecipient = codingDbEntityByRecipient;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "context")
	public EncounterDbEntity getEncounterDbEntity() {
		return this.encounterDbEntity;
	}

	public void setEncounterDbEntity(EncounterDbEntity encounterDbEntity) {
		this.encounterDbEntity = encounterDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "subject")
	public PatientDbEntity getPatientDbEntity() {
		return this.patientDbEntity;
	}

	public void setPatientDbEntity(PatientDbEntity patientDbEntity) {
		this.patientDbEntity = patientDbEntity;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public PeriodDbEntity getPeriodDbEntity() {
		return this.periodDbEntity;
	}

	public void setPeriodDbEntity(PeriodDbEntity periodDbEntity) {
		this.periodDbEntity = periodDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "requester")
	public PractitionerDbEntity getPractitionerDbEntity() {
		return this.practitionerDbEntity;
	}

	public void setPractitionerDbEntity(PractitionerDbEntity practitionerDbEntity) {
		this.practitionerDbEntity = practitionerDbEntity;
	}

	@Column(name = "occurenceperiod", precision = 18, scale = 0)
	public Long getOccurenceperiod() {
		return this.occurenceperiod;
	}

	public void setOccurenceperiod(Long occurenceperiod) {
		this.occurenceperiod = occurenceperiod;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "authoredon", length = 23)
	public Date getAuthoredon() {
		return this.authoredon;
	}

	public void setAuthoredon(Date authoredon) {
		this.authoredon = authoredon;
	}

	@Column(name = "reasoncode")
	public String getReasoncode() {
		return this.reasoncode;
	}

	public void setReasoncode(String reasoncode) {
		this.reasoncode = reasoncode;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createddate", length = 23)
	public Date getCreateddate() {
		return this.createddate;
	}

	public void setCreateddate(Date createddate) {
		this.createddate = createddate;
	}

	@Column(name = "createdby")
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updateddate", length = 23)
	public Date getUpdateddate() {
		return this.updateddate;
	}

	public void setUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	@Column(name = "updatedby")
	public String getUpdatedby() {
		return this.updatedby;
	}

	public void setUpdatedby(String updatedby) {
		this.updatedby = updatedby;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "referralRequestDbEntity")
	public Set<EncounterMapDbEntity> getEncounterMapDbEntities() {
		return this.encounterMapDbEntities;
	}

	public void setEncounterMapDbEntities(Set<EncounterMapDbEntity> encounterMapDbEntities) {
		this.encounterMapDbEntities = encounterMapDbEntities;
	}

}
