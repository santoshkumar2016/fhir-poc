package com.cantatahealth.fhir.db.model;
// Generated Oct 31, 2017 5:51:36 PM by Hibernate Tools 4.3.1.Final

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * PatientMapDbEntity generated by hbm2java
 */
@Entity
@Table(name = "PatientMap", schema = "dbo", catalog = "FHIRDB")
public class PatientMapDbEntity implements java.io.Serializable {

	private long id;
	private AddressDbEntity addressDbEntity;
	private CodingDbEntity codingDbEntityByEthnicity;
	private CodingDbEntity codingDbEntityByRace;
	private CommunicationDbEntity communicationDbEntity;
	private ContactPointDbEntity contactPointDbEntity;
	private HumanNameDbEntity humanNameDbEntity;
	private IdentifierDbEntity identifierDbEntity;
	private OrganizationDbEntity organizationDbEntity;
	private PatientDbEntity patientDbEntity;
	private PractitionerDbEntity practitionerDbEntity;
	private RelatedPersonDbEntity relatedPersonDbEntity;

	public PatientMapDbEntity() {
	}

	public PatientMapDbEntity(long id, PatientDbEntity patientDbEntity) {
		this.id = id;
		this.patientDbEntity = patientDbEntity;
	}

	public PatientMapDbEntity(long id, AddressDbEntity addressDbEntity, CodingDbEntity codingDbEntityByEthnicity,
			CodingDbEntity codingDbEntityByRace, CommunicationDbEntity communicationDbEntity,
			ContactPointDbEntity contactPointDbEntity, HumanNameDbEntity humanNameDbEntity,
			IdentifierDbEntity identifierDbEntity, OrganizationDbEntity organizationDbEntity,
			PatientDbEntity patientDbEntity, PractitionerDbEntity practitionerDbEntity,
			RelatedPersonDbEntity relatedPersonDbEntity) {
		this.id = id;
		this.addressDbEntity = addressDbEntity;
		this.codingDbEntityByEthnicity = codingDbEntityByEthnicity;
		this.codingDbEntityByRace = codingDbEntityByRace;
		this.communicationDbEntity = communicationDbEntity;
		this.contactPointDbEntity = contactPointDbEntity;
		this.humanNameDbEntity = humanNameDbEntity;
		this.identifierDbEntity = identifierDbEntity;
		this.organizationDbEntity = organizationDbEntity;
		this.patientDbEntity = patientDbEntity;
		this.practitionerDbEntity = practitionerDbEntity;
		this.relatedPersonDbEntity = relatedPersonDbEntity;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false, precision = 18, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "address")
	public AddressDbEntity getAddressDbEntity() {
		return this.addressDbEntity;
	}

	public void setAddressDbEntity(AddressDbEntity addressDbEntity) {
		this.addressDbEntity = addressDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ethnicity")
	public CodingDbEntity getCodingDbEntityByEthnicity() {
		return this.codingDbEntityByEthnicity;
	}

	public void setCodingDbEntityByEthnicity(CodingDbEntity codingDbEntityByEthnicity) {
		this.codingDbEntityByEthnicity = codingDbEntityByEthnicity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "race")
	public CodingDbEntity getCodingDbEntityByRace() {
		return this.codingDbEntityByRace;
	}

	public void setCodingDbEntityByRace(CodingDbEntity codingDbEntityByRace) {
		this.codingDbEntityByRace = codingDbEntityByRace;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "communication")
	public CommunicationDbEntity getCommunicationDbEntity() {
		return this.communicationDbEntity;
	}

	public void setCommunicationDbEntity(CommunicationDbEntity communicationDbEntity) {
		this.communicationDbEntity = communicationDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contactpoint")
	public ContactPointDbEntity getContactPointDbEntity() {
		return this.contactPointDbEntity;
	}

	public void setContactPointDbEntity(ContactPointDbEntity contactPointDbEntity) {
		this.contactPointDbEntity = contactPointDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "humanname")
	public HumanNameDbEntity getHumanNameDbEntity() {
		return this.humanNameDbEntity;
	}

	public void setHumanNameDbEntity(HumanNameDbEntity humanNameDbEntity) {
		this.humanNameDbEntity = humanNameDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "identifier")
	public IdentifierDbEntity getIdentifierDbEntity() {
		return this.identifierDbEntity;
	}

	public void setIdentifierDbEntity(IdentifierDbEntity identifierDbEntity) {
		this.identifierDbEntity = identifierDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "organization")
	public OrganizationDbEntity getOrganizationDbEntity() {
		return this.organizationDbEntity;
	}

	public void setOrganizationDbEntity(OrganizationDbEntity organizationDbEntity) {
		this.organizationDbEntity = organizationDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "patient", nullable = false)
	public PatientDbEntity getPatientDbEntity() {
		return this.patientDbEntity;
	}

	public void setPatientDbEntity(PatientDbEntity patientDbEntity) {
		this.patientDbEntity = patientDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "practitioner")
	public PractitionerDbEntity getPractitionerDbEntity() {
		return this.practitionerDbEntity;
	}

	public void setPractitionerDbEntity(PractitionerDbEntity practitionerDbEntity) {
		this.practitionerDbEntity = practitionerDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "relatedPerson")
	public RelatedPersonDbEntity getRelatedPersonDbEntity() {
		return this.relatedPersonDbEntity;
	}

	public void setRelatedPersonDbEntity(RelatedPersonDbEntity relatedPersonDbEntity) {
		this.relatedPersonDbEntity = relatedPersonDbEntity;
	}

}
