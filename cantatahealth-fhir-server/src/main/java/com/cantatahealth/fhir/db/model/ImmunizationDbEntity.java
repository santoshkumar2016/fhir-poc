package com.cantatahealth.fhir.db.model;
// Generated Oct 31, 2017 5:51:36 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ImmunizationDbEntity generated by hbm2java
 */
@Entity
@Table(name = "Immunization", schema = "dbo", catalog = "FHIRDB")
public class ImmunizationDbEntity implements java.io.Serializable {

	private long id;
	private CodingDbEntity codingDbEntityByVaccinecode;
	private CodingDbEntity codingDbEntityByRoute;
	private CodingDbEntity codingDbEntityByStatus;
	private CodingDbEntity codingDbEntityBySite;
	private EncounterDbEntity encounterDbEntity;
	private OrganizationDbEntity organizationDbEntity;
	private PatientDbEntity patientDbEntity;
	private Boolean notgiven;
	private Date date;
	private String lotnumber;
	private Date expirationdate;
	private String note;
	private Date createddate;
	private String createdby;
	private Date updateddate;
	private String updatedby;
	private Set<ImmunizationMapDbEntity> immunizationMapDbEntities = new HashSet<ImmunizationMapDbEntity>(0);

	public ImmunizationDbEntity() {
	}

	public ImmunizationDbEntity(long id, PatientDbEntity patientDbEntity) {
		this.id = id;
		this.patientDbEntity = patientDbEntity;
	}

	public ImmunizationDbEntity(long id, CodingDbEntity codingDbEntityByVaccinecode,
			CodingDbEntity codingDbEntityByRoute, CodingDbEntity codingDbEntityByStatus,
			CodingDbEntity codingDbEntityBySite, EncounterDbEntity encounterDbEntity,
			OrganizationDbEntity organizationDbEntity, PatientDbEntity patientDbEntity, Boolean notgiven, Date date,
			String lotnumber, Date expirationdate, String note, Date createddate, String createdby, Date updateddate,
			String updatedby, Set<ImmunizationMapDbEntity> immunizationMapDbEntities) {
		this.id = id;
		this.codingDbEntityByVaccinecode = codingDbEntityByVaccinecode;
		this.codingDbEntityByRoute = codingDbEntityByRoute;
		this.codingDbEntityByStatus = codingDbEntityByStatus;
		this.codingDbEntityBySite = codingDbEntityBySite;
		this.encounterDbEntity = encounterDbEntity;
		this.organizationDbEntity = organizationDbEntity;
		this.patientDbEntity = patientDbEntity;
		this.notgiven = notgiven;
		this.date = date;
		this.lotnumber = lotnumber;
		this.expirationdate = expirationdate;
		this.note = note;
		this.createddate = createddate;
		this.createdby = createdby;
		this.updateddate = updateddate;
		this.updatedby = updatedby;
		this.immunizationMapDbEntities = immunizationMapDbEntities;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false, precision = 18, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "vaccinecode")
	public CodingDbEntity getCodingDbEntityByVaccinecode() {
		return this.codingDbEntityByVaccinecode;
	}

	public void setCodingDbEntityByVaccinecode(CodingDbEntity codingDbEntityByVaccinecode) {
		this.codingDbEntityByVaccinecode = codingDbEntityByVaccinecode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "route")
	public CodingDbEntity getCodingDbEntityByRoute() {
		return this.codingDbEntityByRoute;
	}

	public void setCodingDbEntityByRoute(CodingDbEntity codingDbEntityByRoute) {
		this.codingDbEntityByRoute = codingDbEntityByRoute;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "status")
	public CodingDbEntity getCodingDbEntityByStatus() {
		return this.codingDbEntityByStatus;
	}

	public void setCodingDbEntityByStatus(CodingDbEntity codingDbEntityByStatus) {
		this.codingDbEntityByStatus = codingDbEntityByStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "site")
	public CodingDbEntity getCodingDbEntityBySite() {
		return this.codingDbEntityBySite;
	}

	public void setCodingDbEntityBySite(CodingDbEntity codingDbEntityBySite) {
		this.codingDbEntityBySite = codingDbEntityBySite;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "encounter")
	public EncounterDbEntity getEncounterDbEntity() {
		return this.encounterDbEntity;
	}

	public void setEncounterDbEntity(EncounterDbEntity encounterDbEntity) {
		this.encounterDbEntity = encounterDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "organization")
	public OrganizationDbEntity getOrganizationDbEntity() {
		return this.organizationDbEntity;
	}

	public void setOrganizationDbEntity(OrganizationDbEntity organizationDbEntity) {
		this.organizationDbEntity = organizationDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "patient", nullable = false)
	public PatientDbEntity getPatientDbEntity() {
		return this.patientDbEntity;
	}

	public void setPatientDbEntity(PatientDbEntity patientDbEntity) {
		this.patientDbEntity = patientDbEntity;
	}

	@Column(name = "notgiven")
	public Boolean getNotgiven() {
		return this.notgiven;
	}

	public void setNotgiven(Boolean notgiven) {
		this.notgiven = notgiven;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date", length = 23)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Column(name = "lotnumber")
	public String getLotnumber() {
		return this.lotnumber;
	}

	public void setLotnumber(String lotnumber) {
		this.lotnumber = lotnumber;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "expirationdate", length = 23)
	public Date getExpirationdate() {
		return this.expirationdate;
	}

	public void setExpirationdate(Date expirationdate) {
		this.expirationdate = expirationdate;
	}

	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createddate", length = 23)
	public Date getCreateddate() {
		return this.createddate;
	}

	public void setCreateddate(Date createddate) {
		this.createddate = createddate;
	}

	@Column(name = "createdby")
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updateddate", length = 23)
	public Date getUpdateddate() {
		return this.updateddate;
	}

	public void setUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	@Column(name = "updatedby")
	public String getUpdatedby() {
		return this.updatedby;
	}

	public void setUpdatedby(String updatedby) {
		this.updatedby = updatedby;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "immunizationDbEntity")
	public Set<ImmunizationMapDbEntity> getImmunizationMapDbEntities() {
		return this.immunizationMapDbEntities;
	}

	public void setImmunizationMapDbEntities(Set<ImmunizationMapDbEntity> immunizationMapDbEntities) {
		this.immunizationMapDbEntities = immunizationMapDbEntities;
	}

}
