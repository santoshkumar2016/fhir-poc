package com.cantatahealth.fhir.db.model;
// Generated Oct 31, 2017 5:51:36 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * AllergyIntoleranceDbEntity generated by hbm2java
 */
@Entity
@Table(name = "AllergyIntolerance", schema = "dbo", catalog = "FHIRDB")
public class AllergyIntoleranceDbEntity implements java.io.Serializable {

	private long id;
	private CodingDbEntity codingDbEntityByClinicalstatus;
	private CodingDbEntity codingDbEntityByType;
	private CodingDbEntity codingDbEntityByVerificationstatus;
	private CodingDbEntity codingDbEntityByCriticality;
	private CodingDbEntity codingDbEntityByCategory;
	private CodingDbEntity codingDbEntityByCode;
	private PatientDbEntity patientDbEntity;
	private PeriodDbEntity periodDbEntity;
	private Date lastoccurence;
	private String note;
	private Date createddate;
	private String createdby;
	private Date updateddate;
	private String updatedby;
	private Set<AllergyIntoleranceMapDbEntity> allergyIntoleranceMapDbEntities = new HashSet<AllergyIntoleranceMapDbEntity>(
			0);

	public AllergyIntoleranceDbEntity() {
	}

	public AllergyIntoleranceDbEntity(long id, PatientDbEntity patientDbEntity) {
		this.id = id;
		this.patientDbEntity = patientDbEntity;
	}

	public AllergyIntoleranceDbEntity(long id, CodingDbEntity codingDbEntityByClinicalstatus,
			CodingDbEntity codingDbEntityByType, CodingDbEntity codingDbEntityByVerificationstatus,
			CodingDbEntity codingDbEntityByCriticality, CodingDbEntity codingDbEntityByCategory,
			CodingDbEntity codingDbEntityByCode, PatientDbEntity patientDbEntity, PeriodDbEntity periodDbEntity,
			Date lastoccurence, String note, Date createddate, String createdby, Date updateddate, String updatedby,
			Set<AllergyIntoleranceMapDbEntity> allergyIntoleranceMapDbEntities) {
		this.id = id;
		this.codingDbEntityByClinicalstatus = codingDbEntityByClinicalstatus;
		this.codingDbEntityByType = codingDbEntityByType;
		this.codingDbEntityByVerificationstatus = codingDbEntityByVerificationstatus;
		this.codingDbEntityByCriticality = codingDbEntityByCriticality;
		this.codingDbEntityByCategory = codingDbEntityByCategory;
		this.codingDbEntityByCode = codingDbEntityByCode;
		this.patientDbEntity = patientDbEntity;
		this.periodDbEntity = periodDbEntity;
		this.lastoccurence = lastoccurence;
		this.note = note;
		this.createddate = createddate;
		this.createdby = createdby;
		this.updateddate = updateddate;
		this.updatedby = updatedby;
		this.allergyIntoleranceMapDbEntities = allergyIntoleranceMapDbEntities;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false, precision = 18, scale = 0)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "clinicalstatus")
	public CodingDbEntity getCodingDbEntityByClinicalstatus() {
		return this.codingDbEntityByClinicalstatus;
	}

	public void setCodingDbEntityByClinicalstatus(CodingDbEntity codingDbEntityByClinicalstatus) {
		this.codingDbEntityByClinicalstatus = codingDbEntityByClinicalstatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type")
	public CodingDbEntity getCodingDbEntityByType() {
		return this.codingDbEntityByType;
	}

	public void setCodingDbEntityByType(CodingDbEntity codingDbEntityByType) {
		this.codingDbEntityByType = codingDbEntityByType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "verificationstatus")
	public CodingDbEntity getCodingDbEntityByVerificationstatus() {
		return this.codingDbEntityByVerificationstatus;
	}

	public void setCodingDbEntityByVerificationstatus(CodingDbEntity codingDbEntityByVerificationstatus) {
		this.codingDbEntityByVerificationstatus = codingDbEntityByVerificationstatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "criticality")
	public CodingDbEntity getCodingDbEntityByCriticality() {
		return this.codingDbEntityByCriticality;
	}

	public void setCodingDbEntityByCriticality(CodingDbEntity codingDbEntityByCriticality) {
		this.codingDbEntityByCriticality = codingDbEntityByCriticality;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "category")
	public CodingDbEntity getCodingDbEntityByCategory() {
		return this.codingDbEntityByCategory;
	}

	public void setCodingDbEntityByCategory(CodingDbEntity codingDbEntityByCategory) {
		this.codingDbEntityByCategory = codingDbEntityByCategory;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "code")
	public CodingDbEntity getCodingDbEntityByCode() {
		return this.codingDbEntityByCode;
	}

	public void setCodingDbEntityByCode(CodingDbEntity codingDbEntityByCode) {
		this.codingDbEntityByCode = codingDbEntityByCode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "patient", nullable = false)
	public PatientDbEntity getPatientDbEntity() {
		return this.patientDbEntity;
	}

	public void setPatientDbEntity(PatientDbEntity patientDbEntity) {
		this.patientDbEntity = patientDbEntity;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "onsetperiod")
	public PeriodDbEntity getPeriodDbEntity() {
		return this.periodDbEntity;
	}

	public void setPeriodDbEntity(PeriodDbEntity periodDbEntity) {
		this.periodDbEntity = periodDbEntity;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "lastoccurence", length = 23)
	public Date getLastoccurence() {
		return this.lastoccurence;
	}

	public void setLastoccurence(Date lastoccurence) {
		this.lastoccurence = lastoccurence;
	}

	@Column(name = "note")
	public String getNote() {
		return this.note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "createddate", length = 23)
	public Date getCreateddate() {
		return this.createddate;
	}

	public void setCreateddate(Date createddate) {
		this.createddate = createddate;
	}

	@Column(name = "createdby")
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updateddate", length = 23)
	public Date getUpdateddate() {
		return this.updateddate;
	}

	public void setUpdateddate(Date updateddate) {
		this.updateddate = updateddate;
	}

	@Column(name = "updatedby")
	public String getUpdatedby() {
		return this.updatedby;
	}

	public void setUpdatedby(String updatedby) {
		this.updatedby = updatedby;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "allergyIntoleranceDbEntity")
	public Set<AllergyIntoleranceMapDbEntity> getAllergyIntoleranceMapDbEntities() {
		return this.allergyIntoleranceMapDbEntities;
	}

	public void setAllergyIntoleranceMapDbEntities(Set<AllergyIntoleranceMapDbEntity> allergyIntoleranceMapDbEntities) {
		this.allergyIntoleranceMapDbEntities = allergyIntoleranceMapDbEntities;
	}

}
